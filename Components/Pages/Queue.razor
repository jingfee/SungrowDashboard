@page "/"
@inject IDialogService DialogService
@inject IServiceBusService ServiceBusService

<MudText Typo="Typo.h5">Queue</MudText>

<MudTable Items="@_queueMessages.OrderBy(q => q.ScheduledDateTime)" Hover="true" Breakpoint="Breakpoint.Sm"
    Class="mt-4 mb-4" Dense="true" SortLabel="Sort By" Loading="@_loading" MultiSelection="true"
    @bind-SelectedItems="_selectedMessages">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<QueueMessage, object>(x => x.ScheduledDateTime)">Time
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QueueMessage, object>(x => x.Body.Operation)">Operation
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QueueMessage, object>(x => x.Body.Rank!)">Rank
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QueueMessage, object>(x => x.Body.Power!)">Power
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<QueueMessage, object>(x => x.Body.TargetSoc!)">Target SoC
            </MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        @{
            var localDateTime = TimeZoneInfo.ConvertTimeFromUtc(context.ScheduledDateTime.DateTime,
            TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));
        }
        <MudTd DataLabel="Time">@localDateTime.ToString("yyyy-MM-dd HH:mm")</MudTd>
        <MudTd DataLabel="Operation">@context.Body.Operation</MudTd>
        <MudTd DataLabel="Rank">@context.Body.Rank</MudTd>
        <MudTd DataLabel="Power">@context.Body.Power</MudTd>
        <MudTd DataLabel="Target SoC">@context.Body.TargetSoc</MudTd>
        <MudTd>
            <div class="d-flex justify-end" style="width: 100%">
                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary"
                    @onclick="@(e => EditMessage(context))" />
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"
                    @onclick="@(e => DeleteMessage(context))" />
            </div>
        </MudTd>
    </RowTemplate>
</MudTable>

<div class="d-block d-md-flex justify-space-between button-group">
    <div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@CreateMessage">Create item
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="@OpenAddChargeDialog" Class="mt-4 mt-md-0">
            Add
            charge
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="@OpenAddDischargeDialog"
            Class="mt-4 mt-md-0">Add
            discharge
        </MudButton>
    </div>

    <div>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(_selectedMessages.Count == 0)"
            @onclick="@DeleteMessages" Class="mt-4 mt-md-0">Remove selected
        </MudButton>
    </div>

</div>

<style>
    @@media (max-width: 959px) {
        .button-group {
            button {
                width: 100%;
                height: 48px;
            }
        }
    }
</style>

@code {
    private List<QueueMessage> _queueMessages = new List<QueueMessage>();
    private HashSet<QueueMessage> _selectedMessages = new HashSet<QueueMessage>();
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _queueMessages = await ServiceBusService.ReceiveMessages();
        _loading = false;
    }

    private async Task DeleteMessage(QueueMessage message)
    {
        if (message == null || !message.SequenceNumber.HasValue)
        {
            return;
        }

        var result = await ShowConfirmDelete();
        if (!result)
        {
            return;
        }

        await ServiceBusService.RemoveMessage(message.SequenceNumber!.Value);
        _queueMessages.Remove(message);
    }

    private async Task DeleteMessages()
    {
        if (_selectedMessages.Count == 0)
        {
            return;
        }

        var result = await ShowConfirmDelete();
        if (!result)
        {
            return;
        }

        foreach (var message in _selectedMessages)
        {
            await ServiceBusService.RemoveMessage(message.SequenceNumber!.Value);
            _queueMessages.Remove(message);
        }
    }

    private async Task<bool> ShowConfirmDelete()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Remove message", options);
        var result = await dialog.Result;

        return !result!.Canceled && result.Data != null && (bool)result.Data;
    }

    private async Task EditMessage(QueueMessage message)
    {
        if (message == null || !message.SequenceNumber.HasValue)
        {
            return;
        }

        var localDateTime = TimeZoneInfo.ConvertTimeFromUtc(message.ScheduledDateTime.DateTime,
        TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time"));

        QueueItemModel model = new QueueItemModel()
        {
            Date = localDateTime,
            Time = localDateTime.TimeOfDay,
            Operation = ((int)message.Body.Operation).ToString(),
            Power = message.Body.Power,
            Rank = message.Body.Rank,
            TargetSoc = message.Body.TargetSoc,
        };
        QueueMessage? item = await OpenQueueItemDialog(model, "Edit message");

        if (item == null)
        {
            return;
        }

        await ServiceBusService.RemoveMessage(message.SequenceNumber.Value);
        _queueMessages.Remove(message);
        item.SequenceNumber = await ServiceBusService.AddMessage(item);
        _queueMessages.Add(item);
    }

    private async Task CreateMessage()
    {
        QueueMessage? item = await OpenQueueItemDialog(new(), "Create message");

        if (item == null)
        {
            return;
        }

        item.SequenceNumber = await ServiceBusService.AddMessage(item);
        _queueMessages.Add(item);
    }

    private async Task<QueueMessage?> OpenQueueItemDialog(QueueItemModel model, string title)
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false
        };
        var parameters = new DialogParameters<QueueItemDialog> { { x => x.Model, model } };

        var dialog = await DialogService.ShowAsync<QueueItemDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result!.Canceled || result.Data == null)
        {
            return null;
        }

        QueueItemModel dialogData = (QueueItemModel)result.Data;

        QueueBody body = new QueueBody()
        {
            Operation = (Operation)Enum.Parse(typeof(Operation), dialogData.Operation!),
            Power = dialogData.Power,
            Rank = dialogData.Rank,
            TargetSoc = dialogData.TargetSoc
        };

        DateTime scheduledTime = new DateTime(DateOnly.FromDateTime(dialogData.Date!.Value),
        TimeOnly.FromTimeSpan(dialogData.Time!.Value));
        TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById("Central European Standard Time");
        DateTime scheduledTimeUtc = TimeZoneInfo.ConvertTimeToUtc(scheduledTime, timeZone);

        QueueMessage item = new QueueMessage()
        {
            ScheduledDateTime = scheduledTimeUtc,
            Body = body
        };

        return item;
    }

    private async Task OpenAddChargeDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false
        };
        var parameters = new DialogParameters<AddChargeDialog> { { x => x.Model, new() } };
        var dialog = await DialogService.ShowAsync<AddChargeDialog>("Add charge", parameters, options);
        var result = await dialog.Result;

        if (result!.Canceled || result.Data == null)
        {
            return;
        }
    }

    private async Task OpenAddDischargeDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            BackdropClick = false
        };
        var parameters = new DialogParameters<AddDischargeDialog> { { x => x.Model, new() } };
        var dialog = await DialogService.ShowAsync<AddDischargeDialog>("Add discharge", parameters, options);
        var result = await dialog.Result;

        if (result!.Canceled || result.Data == null)
        {
            return;
        }
    }
}
