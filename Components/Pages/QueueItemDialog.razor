@inject IJSRuntime jsRuntime

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">
            @Dialog!.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm EditContext="@_editContext" FormName="CreateQueueItem" Enhance Class="pb-4">
            <DataAnnotationsValidator />
            <MudSelect @bind-Value="@Model.Operation" Label="Operation">
                @foreach (var operationItem in _operationItems)
                {
                    <MudSelectItem Value="@(((int)operationItem).ToString())">@operationItem.ToString()</MudSelectItem>
                }
            </MudSelect>
            @if (IsMobile)
            {
                <MudTextField Format="yyyy-MM-dd" Label="Date" InputType="InputType.Date" @bind-Value="@Model.Date"
                    Class="mt-4" />
                <MudTextField Label="Time" InputType="InputType.Time" @bind-Value="@Model.Time" Class="mt-4" />
            }
            else
            {
                <MudDatePicker Label="Date" @bind-Date="@Model.Date" Class="mt-4" />
                <MudTimePicker Label="Time" @bind-Time="@Model.Time" Class="mt-4" />
            }


            @if (Model.Operation == ((int)Operation.StartDischarge).ToString())
            {
                <MudNumericField @bind-Value="@Model.Rank" Label="Rank" Min="0" HideSpinButtons="true" Class="mt-2" />
            }

            @if (Model.Operation == ((int)Operation.StartCharge).ToString())
            {
                <MudNumericField @bind-Value="@Model.Power" Label="Power" Min="0" Max="8000" HideSpinButtons="true"
                    Class="mt-2" />
            }

            @if (Model.Operation == ((int)Operation.StartCharge).ToString() || Model.Operation ==
                        ((int)Operation.StopCharge).ToString())
            {
                <MudNumericField @bind-Value="@Model.TargetSoc" Label="Target SoC" Min="0.0M" Max="1.0M" Step=".1M"
                    HideSpinButtons="true" Class="mt-2" />
            }

        </EditForm>
    </DialogContent>
    <DialogActions>
        <div class="mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="@Cancel">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_editContext.Validate())"
                @onclick="@Save">
                Save
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public QueueItemModel Model { get; set; } = default!;

    [CascadingParameter]
    public IMudDialogInstance Dialog { get; set; } = default!;
    public bool IsMobile { get; set; }

    private IEnumerable<Operation> _operationItems = default!;
    private EditContext _editContext = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _operationItems = Enum.GetValues(typeof(Operation)).Cast<Operation>();
    }

    protected override async Task OnInitializedAsync()
    {
        IsMobile = await jsRuntime.InvokeAsync<bool>("isMobile");

    }

    private void Save()
    {
        if (!_editContext.Validate())
        {
            return;
        }

        Dialog.Close(DialogResult.Ok(Model));
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }
}